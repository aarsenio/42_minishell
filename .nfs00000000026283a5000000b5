#include <minishell.h>

bool	builtin(t_arglist *s, t_data *data)
{
	if (streq(s->av[0], "exit"))
		cmd_exit(s, data);
	else if (streq(s->av[0], "unset"))
		g_exit_status = call_cmd_unset(s, data);
	else if (streq(s->av[0], "export"))
		g_exit_status = cmd_export(s, data);
	else if (streq(s->av[0], "cd"))
		g_exit_status = call_cmd_cd(s, data);
	else if (ft_strchr(s->av[0], '=') && is_valid_id(s->av[0]))
		g_exit_status = save_user_vars(s->av[0],
				&data->envp_lst, 1);
	else if (streq(s->av[0], "echo"))
		g_exit_status = call_cmd_echo(s);
	else if (streq(s->av[0], "pwd"))
		g_exit_status = cmd_pwd();
	else if (streq(s->av[0], "env"))
		g_exit_status = cmd_env(data);
	else
		return (1);
	return (0);
}

extern long long	g_exit_status;

static void	left_side(t_statement *nd, t_data *data, int pdes[2])
{
	close(STDOUT_FILENO);
	dup(pdes[1]);
	close(pdes[0]);
	close(pdes[1]);
	exec_cmd(nd, data);
}

static void	right_side(t_statement *nd, t_data *data, int pdes[2])
{
	close(STDIN_FILENO);
	dup(pdes[0]);
	close(pdes[0]);
	close(pdes[1]);
	exec_cmd(nd, data);
}

//	bytes written on pipedes[1] can be read on pipedes[0]
void	exec_pipe(t_statement *node, t_data *data)
{
	pid_t	child_pid;
	int		pipedes[2];
	int		temp_status;

	node->operator = NONE;
	if (pipe(pipedes) == -1)
		panic(data, PIPE_ERR, EXIT_FAILURE);
	child_pid = fork();
	if (child_pid == -1)
		panic(data, FORK_ERR, EXIT_FAILURE);
	if (child_pid == 0)
		left_side(node, data, pipedes);
	right_side(node->next, data, pipedes);
	close(pipedes[0]);
	close(pipedes[1]);
	waitpid(child_pid, &temp_status, 0);
	g_exit_status = temp_status >> 8;
}


void	cmd_binaries(t_arglist *statement, t_data *data)
{
	char	*bin_path;
	char	**paths;
	int i, j = -1;

	bin_path = statement->av[0];
	paths = get_paths(data->envp_lst);
	while(paths[++i])
	{
		while(paths[i][++j])
			printf("[%d][%d]: %s\n", i, j, paths);
	}
	printf("bin_path: %s\n", bin_path);
	if (is_absolute_path(statement))
	{
		if (execve(bin_path, statement->av, data->envp) == -1)
			exit_and_free_matrix(paths, statement->av[0], 127);
		exit_and_free_matrix(paths, NULL, EXIT_SUCCESS);
		return ;
	}
	bin_path = get_bin_path(statement->av[0], paths);
	printf("bin_path: %s\n", bin_path);
	if (bin_path == NOT_FOUND)
	{
		cmd_not_found(statement->av[0]);
		exit_and_free_matrix(paths, NULL, 127);
	}
	if (execve(bin_path, statement->av, data->envp) == -1)
	{
		free(bin_path);
		exit_and_free_matrix(paths, statement->av[0], 127);
	}
	free(bin_path);
	exit_and_free_matrix(paths, NULL, EXIT_SUCCESS);
}

void	exec_executables(t_arglist *node, t_data *data)
{
	if (builtin(node, data))
		return ;
	cmd_binaries(node, data);
}

void	exec_cmd(t_arglist *current_node, t_data *data)
{
	signal(SIGINT, child_signals);
	if (current_node->operator == PIPE)
		exec_pipe(current_node, data);
	else if (current_node->operator == NONE)
		exec_executables(current_node, data);
	else
		exec_redirects(current_node, data);
	exit(g_exit_status);
}

void	exec_type(t_arglist *statement_list, t_data *data)
{
	int		temp_status;

	if (p_lstsize(statement_list) == 1)
	{
		if (!builtin(statement_list, data) && fork() == 0)
		{
			signal(SIGINT, child_signals);
			exec_executables(statement_list, data);
		}
	}
	else if (fork() == 0)
		exec_cmd(statement_list, data);
	waitpid(-1, &temp_status, 0);
	if (!WTERMSIG(temp_status))
		g_exit_status = temp_status >> 8;
}
